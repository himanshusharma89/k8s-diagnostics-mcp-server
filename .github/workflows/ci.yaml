name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: infracloud/k8s-diagnostics-mcp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
    
    - name: Build binary
      run: go build -v ./...

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.19.0
      with:
        args: ./...

  build-and-push:
    needs: [test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm-test:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Lint Helm charts
      run: |
        if [ -d "charts" ]; then
          helm lint charts/*
        fi
    
    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
    
    - name: Test Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f k8s-deployment.yaml

  release:
    needs: [test, security, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mcpservers-submission:
    needs: [release]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Prepare MCP Servers submission
      run: |
        echo "Creating submission for mcpservers.org"
        cat > mcp-server-submission.json << EOF
        {
          "name": "k8s-diagnostics",
          "description": "Intelligent Kubernetes troubleshooting and diagnostics MCP server",
          "author": "InfraCloud",
          "homepage": "https://github.com/infracloudio/k8s-diagnostics-mcp",
          "license": "Apache-2.0",
          "categories": ["infrastructure", "monitoring", "debugging"],
          "keywords": ["kubernetes", "k8s", "diagnostics", "troubleshooting", "devops", "cncf"],
          "repository": "https://github.com/infracloudio/k8s-diagnostics-mcp",
          "installation": {
            "go": "go install github.com/infracloudio/k8s-diagnostics-mcp@latest",
            "docker": "docker run ghcr.io/infracloud/k8s-diagnostics-mcp:latest"
          },
          "tools": [
            {
              "name": "diagnose_pod",
              "description": "Diagnose issues with a specific Kubernetes pod"
            },
            {
              "name": "analyze_cluster_health", 
              "description": "Analyze overall Kubernetes cluster health"
            },
            {
              "name": "get_workload_recommendations",
              "description": "Get recommendations for improving workload configurations"
            },
            {
              "name": "analyze_pod_logs",
              "description": "Analyze pod logs for common error patterns"
            }
          ],
          "resources": [
            {
              "name": "k8s://troubleshooting/common-issues",
              "description": "Common Kubernetes troubleshooting guide"
            }
          ]
        }
        EOF
    
    - name: Comment on release
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.release.id,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Release published! 
            
            **Next Steps:**
            1. Submit to mcpservers.org registry
            2. Update documentation
            3. Announce in CNCF community
            
            **Installation:**
            \`\`\`bash
            go install github.com/infracloudio/k8s-diagnostics-mcp@${{ github.event.release.tag_name }}
            \`\`\`
            
            **Docker:**
            \`\`\`bash
            docker run ghcr.io/infracloud/k8s-diagnostics-mcp:${{ github.event.release.tag_name }}
            \`\`\`
            `
          })